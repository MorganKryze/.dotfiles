# Opens a VS Code window in the .dotfiles project
function config() {
	cd ~/.dotfiles
	opn
}

# Opens a VS Code window in the ESILV docs directory
function esilv() {
	cd ~/Documents/02-dev/02-git/01-morgankryze/ESILV-Courses/main
	opn
}

# List all processes using a disk
function processes-using-disk() {
	description "processes-using-disk" "lists all processes using a disk."

	local disk_name="$1"
	sudo lsof /Volumes/$disk_name || error "Failed to list processes using disk."

	success "Processes using the disk have been listed."
}

# Kill all processes using a disk
function kill-processes-using-disk() {
	description "kill-processes-using-disk" "kills all processes using a disk."

	local disk_name="$1"
	sudo lsof /Volumes/$disk_name | awk 'NR > 1 {print $2}' | sudo xargs kill || error "Failed to kill processes using disk."

	success "Processes using the disk have been killed."
}

# Disable spotlight indexing for a disk
function disable-spotlight-indexing-for-disk() {
	description "disable-spotlight-indexing-for-disk" "disables spotlight indexing for a disk."

	local disk_name="$1"
	sudo mdutil -d "/Volumes/$disk_name" || error "Failed to disable spotlight indexing for disk."
	sudo mdutil -X "/Volumes/$disk_name" || error "Failed to disable spotlight indexing for disk."

	success "Spotlight indexing has been disabled for the disk."
}

# Create a random hash
function rnd-hash() {
	description "rnd-hash" "creates a random hash."

	txt $(openssl rand -hex 6) || error "Failed to create random hash."
}

# Create the symlinks for the dotfiles
function create-symlinks() {
	description "create-symlinks" "creates symlinks for all the dotfiles in the repository."

	info "Starting with Nix..."
	mkdir -p ~/.config/nix-darwin
	[ ! -L ~/.config/nix-darwin/flake.nix ] && ln -s ~/.dotfiles/scripts/flake.nix ~/.config/nix-darwin/flake.nix || warning ".config/nix-darwin/flake.nix already exists!"

	info "Adding Git symlinks..."
	[ ! -L ~/.gitconfig ] && ln -s ~/.dotfiles/apps/git/.gitconfig ~/.gitconfig || warning ".gitconfig already exists!"
	[ ! -L ~/.git_func ] && ln -s ~/.dotfiles/apps/git/.git_func ~/.git_func || warning ".git_func already exists!"
	if [ ! -d ~/.gitemojis ]; then
		mkdir ~/.gitemojis
	fi
	[ ! -L ~/.gitemojis/commit-msg ] && ln -s ~/.dotfiles/apps/git/gitemojis/commit-msg ~/.gitemojis/commit-msg || warning ".gitemojis/commit-msg already exists!"
	[ ! -L ~/.gitemojis/prepare-commit-msg ] && ln -s ~/.dotfiles/apps/git/gitemojis/prepare-commit-msg ~/.gitemojis/prepare-commit-msg || warning ".gitemojis/prepare-commit-msg already exists!"

	info "Adding Zsh symlinks..."
	[ ! -L ~/.zshrc ] && ln -s ~/.dotfiles/apps/zsh/.zshrc ~/.zshrc || warning ".zshrc already exists!"
	[ ! -L ~/.zshenv ] && ln -s ~/.dotfiles/apps/zsh/.zshenv ~/.zshenv || warning ".zshenv already exists!"
	[ ! -L ~/.zprofile ] && ln -s ~/.dotfiles/apps/zsh/.zprofile ~/.zprofile || warning ".zprofile already exists!"

	[ ! -L ~/.exports ] && ln -s ~/.dotfiles/apps/zsh/.exports ~/.exports || warning ".exports already exists!"
	[ ! -L ~/.aliases ] && ln -s ~/.dotfiles/apps/zsh/.aliases ~/.aliases || warning ".aliases already exists!"
	[ ! -L ~/.functions ] && ln -s ~/.dotfiles/apps/zsh/.functions ~/.functions || warning ".functions already exists!"

	info "Adding Yabai symlinks..."
	[ ! -L ~/.yabairc ] && ln -s ~/.dotfiles/apps/yabai/.yabairc ~/.yabairc || warning ".yabairc already exists!"
	[ ! -L ~/.skhdrc ] && ln -s ~/.dotfiles/apps/yabai/.skhdrc ~/.skhdrc || warning ".skhdrc already exists!"
	[ ! -L ~/.yabai_func ] && ln -s ~/.dotfiles/apps/yabai/.yabai_func ~/.yabai_func || warning ".yabai_func already exists!"

	info "Adding Conda symlinks..."
	[ ! -L ~/.condarc ] && ln -s ~/.dotfiles/apps/conda/.condarc ~/.condarc || warning ".condarc already exists!"
	[ ! -L ~/.conda_func ] && ln -s ~/.dotfiles/apps/conda/.conda_func ~/.conda_func || warning ".conda_func already exists!"

	info "Adding VsCode symlinks..."
	TARGET_DIR="$HOME/Library/Application Support/Code/User"
	if [ -d "$TARGET_DIR" ]; then
		ln -sf ~/.dotfiles/apps/vscode/settings.json "$TARGET_DIR/settings.json" || warning "settings.json already exists!"
		ln -sf ~/.dotfiles/apps/vscode/keybindings.json "$TARGET_DIR/keybindings.json" || warning "keybindings.json already exists!"
	else
		warning "VSCode is not installed!"
	fi

	info "Adding last symlinks..."
	[ ! -L ~/.hushlogin ] && ln -s ~/.dotfiles/docs/assets/.hushlogin ~/.hushlogin || warning ".hushlogin already exists!"
	[ ! -L ~/.curlrc ] && ln -s ~/.dotfiles/apps/curl/.curlrc ~/.curlrc || warning ".curlrc already exists!"

	success "Symlinks added successfully!"
}

# Remove the symlinks for the dotfiles
function remove-symlinks() {
	description "remove-symlinks" "removes all symlinks created by the create_symlinks function."

	info "Removing Git symlinks..."
	[ -L ~/.gitconfig ] && rm ~/.gitconfig
	[ -L ~/.git_func ] && rm ~/.git_func
	[ -L ~/.gitemojis/commit-msg ] && rm ~/.gitemojis/commit-msg
	[ -L ~/.gitemojis/prepare-commit-msg ] && rm ~/.gitemojis/prepare-commit-msg

	info "Removing Zsh symlinks..."
	[ -L ~/.zshrc ] && rm ~/.zshrc
	[ -L ~/.zshenv ] && rm ~/.zshenv
	[ -L ~/.zprofile ] && rm ~/.zprofile

	[ -L ~/.exports ] && rm ~/.exports
	[ -L ~/.aliases ] && rm ~/.aliases
	[ -L ~/.functions ] && rm ~/.functions

	info "Removing Yabai symlinks..."
	[ -L ~/.yabairc ] && rm ~/.yabairc
	[ -L ~/.skhdrc ] && rm ~/.skhdrc
	[ -L ~/.yabai_func ] && rm ~/.yabai_func

	info "Removing Conda symlinks..."
	[ -L ~/.condarc ] && rm ~/.condarc
	[ -L ~/.conda_func ] && rm ~/.conda_func

	info "Removing VsCode symlinks..."
	[ -L ~/Library/Application\ Support/Code/User/settings.json ] && rm ~/Library/Application\ Support/Code/User/settings.json
	[ -L ~/Library/Application\ Support/Code/User/keybindings.json ] && rm ~/Library/Application\ Support/Code/User/keybindings.json

	info "Removing last symlinks..."
	[ -L ~/.hushlogin ] && rm ~/.hushlogin
	[ -L ~/.curlrc ] && rm ~/.curlrc

	success "Symlinks removed successfully!"
}

# Create a new SSH key pair for GitHub
function create-github-ssh-connection() {
	description "create-github-ssh-connection" "sets up a new SSH key pair for GitHub."

	source ~/.dotfiles/.env

	info "Generating SSH key..."
	ssh-keygen -t ed25519 -C "$GITHUB_EMAIL" -f ~/.ssh/git -p "" || error "Failed to generate SSH key."

	info "Starting the ssh-agent..."
	eval "$(ssh-agent -s)" || error "Failed to start the ssh-agent."

	info "Adding the SSH key to the ssh-agent..."
	echo "Host github.com
  IPreferredAuthentications publickey
  IdentityFile ~/.ssh/git" >~/.ssh/config || error "Failed to write SSH config."

	info "Adding the SSH key to the ssh-agent..."
	ssh-add ~/.ssh/git || error "Failed to add SSH key to the ssh-agent."

	info "Copying the SSH key to the clipboard..."
	pbcopy <~/.ssh/git.pub || error "Failed to copy SSH key to clipboard."

	info "The SSH key has been copied to the clipboard. Please add it to your GitHub account."
	open "https://github.com/settings/keys" || error "Failed to open GitHub keys page."

	success "SSH key has been set up successfully."
}
