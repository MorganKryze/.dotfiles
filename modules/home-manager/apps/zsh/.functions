# Opens a VS Code window in the .dotfiles project
function config() {
	cd ~/.dotfiles
	opn
}

# Opens a VS Code window in the ESILV docs directory
function esilv() {
	cd ~/Documents/02-dev/02-git/01-morgankryze/ESILV-Courses/main
	opn
}

# List all processes using a disk
function processes-using-disk() {
	description "processes-using-disk" "lists all processes using a disk."

	local disk_name="$1"
	sudo lsof /Volumes/$disk_name || error "Failed to list processes using disk." || return 1

	success "Processes using the disk have been listed."
}

# Kill all processes using a disk
function kill-processes-using-disk() {
	description "kill-processes-using-disk" "kills all processes using a disk."

	local disk_name="$1"
	sudo lsof /Volumes/$disk_name | awk 'NR > 1 {print $2}' | sudo xargs kill || error "Failed to kill processes using disk." || return 1

	success "Processes using the disk have been killed."
}

# Disable spotlight indexing for a disk
function disable-spotlight-indexing-for-disk() {
	description "disable-spotlight-indexing-for-disk" "disables spotlight indexing for a disk."

	local disk_name="$1"
	sudo mdutil -d "/Volumes/$disk_name" || error "Failed to disable spotlight indexing for disk." || return 1
	sudo mdutil -X "/Volumes/$disk_name" || error "Failed to disable spotlight indexing for disk." || return 1

	success "Spotlight indexing has been disabled for the disk."
}

# Create a random hash
function rnd-hash() {
	description "rnd-hash" "creates a random hash."

	txt $(openssl rand -hex 6) || error "Failed to create random hash."
}

# Hash a string
function hash() {
	local string="$1"
	txt $(echo -n "$string" | shasum -a 256 | awk '{print $1}')
}

# Create a new SSH key pair for GitHub
function create-git-ssh-connections() {
	description "create-github-ssh-connection" "sets up a new SSH key pair for GitHub."

	source ~/.dotfiles/.env

	info "Generating SSH key..."
	ssh-keygen -t ed25519 -C "$GITHUB_EMAIL" -f ~/.ssh/git -p "" || error "Failed to generate SSH key." || return 1

	info "Starting the ssh-agent..."
	eval "$(ssh-agent -s)" || error "Failed to start the ssh-agent." || return 1

	info "Adding the SSH key to the ssh config for GitHub and GitLab..."
	echo "Host github.com
  PreferredAuthentications publickey
  IdentityFile ~/.ssh/git" >~/.ssh/config || error "Failed to write SSH config." || return 1

	echo "Host gitlab.com
  PreferredAuthentications publickey
  IdentityFile ~/.ssh/git" >>~/.ssh/config || error "Failed to write SSH config." || return 1

	info "Adding the SSH key to the ssh-agent..."
	ssh-add ~/.ssh/git || error "Failed to add SSH key to the ssh-agent." || return 1

	info "Copying the SSH key to the clipboard..."
	pbcopy <~/.ssh/git.pub || error "Failed to copy SSH key to clipboard." || return 1

	info "The SSH key has been copied to the clipboard. Please add it to your GitHub account."
	open "https://github.com/settings/keys" || error "Failed to open GitHub keys page." || return 1

	acknowledge "Insert your key in the GitHub account before continuing..."

	open "https://gitlab.com/-/user_settings/ssh_keys" || error "Failed to open GitLab keys page." || return 1

	acknowledge "Insert your key in the GitLab account before continuing..."

	success "SSH key has been set up successfully."
}

# Wrapper for the yazi file manager
function y() {
	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
	yazi "$@" --cwd-file="$tmp"
	if cwd="$(command cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
		builtin cd -- "$cwd"
	fi
	rm -f -- "$tmp"
}

# Delete all .DS_Store files in a folder and its subdirectories
function flush() {
	description "flush" "deletes all .DS_Store files in a folder and its subdirectories."

	local folder="$1"

	if [ -z "$folder" ]; then
		error "Usage: delete_ds_store <folder>" || return 1
	fi

	if [ ! -d "$folder" ]; then
		error "Error: $folder is not a directory" || return 1
	fi

	find "$folder" -name ".DS_Store" -type f -exec rm -f {} \;
	success "All .DS_Store files in $folder and its subdirectories have been deleted."
}

# Open the superfile app
function spf() {
    os=$(uname -s)

    # Linux
    if [[ "$os" == "Linux" ]]; then
        export SPF_LAST_DIR="${XDG_STATE_HOME:-$HOME/.local/state}/superfile/lastdir"
    fi

    # macOS
    if [[ "$os" == "Darwin" ]]; then
        export SPF_LAST_DIR="$HOME/Library/Application Support/superfile/lastdir"
    fi

    command spf "$@"

    [ ! -f "$SPF_LAST_DIR" ] || {
        . "$SPF_LAST_DIR"
        rm -f -- "$SPF_LAST_DIR" > /dev/null
    }
}